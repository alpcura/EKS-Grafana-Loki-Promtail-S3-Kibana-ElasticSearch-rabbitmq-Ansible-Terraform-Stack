- hosts: localhost
  gather_facts: false

  vars_files:
    - "{{ playbook_dir }}/group_vars/all.yml"

  vars:
    aws_profile: sandbox
    kubeconfig_path: "{{ playbook_dir }}/.kubeconfig"
    terraform_dir: "{{ playbook_dir }}/../terraform"
    gitops_dir: "{{ playbook_dir }}/../gitops"
    bootstrap_envs: ["dev"]

  environment:
    AWS_PROFILE: "{{ aws_profile }}"
    AWS_REGION: "{{ region | default('') }}"
    AWS_SDK_LOAD_CONFIG: "1"
    KUBECONFIG: "{{ kubeconfig_path }}"

  tasks:

        # ----- Namespaces (uygulama + platform) -----
    - name: Create platform/application namespaces
      kubernetes.core.k8s:
        state: present
        definition:
          apiVersion: v1
          kind: Namespace
          metadata:
            name: "{{ item }}"
      loop:
        - prod-api
        - worker
        - messaging
        - logging
        - api
        - project-3ui
        - rabbitmq-ui

    # ----- TF outputs -----
    - name: Read all TF outputs (JSON)
      ansible.builtin.command: terraform output -json
      args: { chdir: "{{ terraform_dir }}" }
      register: tf_out
      changed_when: false

    - name: Parse TF outputs to facts
      ansible.builtin.set_fact:
        TF_CLUSTER_NAME:  "{{ (tf_out.stdout | from_json).cluster_name.value }}"
        TF_REGION:        "{{ (tf_out.stdout | from_json).region.value }}"
        TF_VPC_ID:        "{{ (tf_out.stdout | from_json).vpc_id.value }}"
        TF_ALB_ROLE_ARN:  "{{ (tf_out.stdout | from_json).alb_controller_role_arn.value }}"
        TF_EBS_ROLE_ARN:  "{{ (tf_out.stdout | from_json).ebs_csi_role_arn.value }}"
        TF_LOKI_ROLE_ARN: "{{ (tf_out.stdout | from_json).loki_irsa_role_arn.value }}"
        TF_LOKI_BUCKET:   "{{ (tf_out.stdout | from_json).loki_bucket_name.value }}"

    # ----- kubeconfig -----
    - name: Write kubeconfig
      ansible.builtin.command:
        argv:
          - aws
          - eks
          - update-kubeconfig
          - --name
          - "{{ TF_CLUSTER_NAME }}"
          - --region
          - "{{ TF_REGION }}"
          - --profile
          - "{{ aws_profile }}"
          - --kubeconfig
          - "{{ kubeconfig_path }}"
      changed_when: false

    # ----- Storage (EBS-CSI + default SC) -----
    - name: Bind IRSA to aws-ebs-csi-driver addon
      ansible.builtin.command:
        argv:
          - aws
          - eks
          - update-addon
          - --cluster-name
          - "{{ TF_CLUSTER_NAME }}"
          - --region
          - "{{ TF_REGION }}"
          - --addon-name
          - aws-ebs-csi-driver
          - --service-account-role-arn
          - "{{ TF_EBS_ROLE_ARN }}"
      changed_when: true
      failed_when: false

    - name: Ensure gp3-csi StorageClass is default
      kubernetes.core.k8s:
        state: present
        src: "{{ playbook_dir }}/k8s/storage/gp3-csi.yaml"

    # ----- Namespaces (profesyonel minimum set) -----
    - name: Create platform/application namespaces
      kubernetes.core.k8s:
        state: present
        definition:
          apiVersion: v1
          kind: Namespace
          metadata: { name: "{{ item }}" }
      loop:
        - prod-api
        - worker
        - messaging
        - logging

    # ----- Argo CD -----
    - name: Add argo helm repo
      ansible.builtin.command: helm repo add argo https://argoproj.github.io/argo-helm
      failed_when: false
      changed_when: false

    - name: Install/upgrade Argo CD
      ansible.builtin.command: >
        helm upgrade --install argocd argo/argo-cd
        -n argocd --create-namespace --wait
      changed_when: true
        # Kontrolcü podlarının Ready olmasını bekle (Deployment/StatefulSet fark etmeksizin)
    - name: Wait application-controller pods Ready
      ansible.builtin.command:
        argv:
          - kubectl
          - -n
          - argocd
          - wait
          - --for=condition=Ready
          - pod
          - -l
          - app.kubernetes.io/name=argocd-application-controller
          - --timeout=600s
      changed_when: false

    # Sunucu (UI/API) için rollout bekle
    - name: Wait argocd-server rollout
      ansible.builtin.command:
        argv:
          - kubectl
          - -n
          - argocd
          - rollout
          - status
          - deploy/argocd-server
          - --timeout=600s
      changed_when: false

    - name: Wait application-controller ready
      ansible.builtin.command: >
        kubectl -n argocd rollout status deploy/argocd-application-controller --timeout=300s
      changed_when: false

    - name: Wait repo-server ready
      ansible.builtin.command: >
        kubectl -n argocd rollout status deploy/argocd-repo-server --timeout=300s
      changed_when: false

    - name: Wait argocd-server ready
      ansible.builtin.command: >
        kubectl -n argocd rollout status deploy/argocd-server --timeout=300s
      changed_when: false

    # ----- Placeholder doldurma (envs/dev içindeki dosyalar) -----
    - name: Fill placeholders in platform-alb.yaml
      ansible.builtin.replace:
        path: "{{ gitops_dir }}/envs/dev/platform-alb.yaml"
        regexp: "{{ item.key }}"
        replace: "{{ item.value }}"
      loop:
        - { key: "<ALB_CONTROLLER_ROLE_ARN>", value: "{{ TF_ALB_ROLE_ARN }}" }
        - { key: "<EKS_CLUSTER_NAME>",        value: "{{ TF_CLUSTER_NAME }}" }
        - { key: "<AWS_REGION>",              value: "{{ TF_REGION }}" }
        - { key: "<VPC_ID>",                  value: "{{ TF_VPC_ID }}" }

    - name: Fill placeholders in platform-loki.yaml
      ansible.builtin.replace:
        path: "{{ gitops_dir }}/envs/dev/platform-loki.yaml"
        regexp: "{{ item.key }}"
        replace: "{{ item.value }}"
      loop:
        - { key: "<LOKI_IRSA_ROLE_ARN>", value: "{{ TF_LOKI_ROLE_ARN }}" }
        - { key: "<LOKI_BUCKET_NAME>",   value: "{{ TF_LOKI_BUCKET }}" }
        - { key: "<AWS_REGION>",         value: "{{ TF_REGION }}" }

    # ----- Root App apply (gitops/envs/dev/_root-app.yaml) -----
    - name: Apply root app (dev)
      kubernetes.core.k8s:
        state: present
        namespace: argocd
        src: "{{ gitops_dir }}/envs/dev/_root-app.yaml"

    # ----- Görünürlük -----
    - name: Show Argo apps
      ansible.builtin.command: kubectl -n argocd get applications
      changed_when: false
